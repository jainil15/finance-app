package views

import "financeapp/pkg/model"
import "financeapp/aggregate"
import "financeapp/domain/transaction"
import "financeapp/web/components/forms"
import "financeapp/web/components/fragments"

templ UserTransaction(t aggregate.Transaction) {
	<div class="">
		{ t.Category.Name.String() }
	</div>
}

func TransactionIncomeSum(tran []aggregate.Transaction) float64 {
	sum := 0.0
	for _, t := range tran {
		if t.Transaction.TransactionType == transaction.Income {
			sum += float64(t.Transaction.Value)
		}
	}
	return sum
}

func TransactionSum(tran []aggregate.Transaction) float64 {
	sum := 0.0
	for _, t := range tran {
		if t.Transaction.TransactionType == transaction.Expense {
			sum += float64(t.Transaction.Value)
		}
	}
	return sum
}

templ UserBudgetStat(u model.UserAggregate) {
	@fragments.UserBudgetStat(*u.Budget, u.Transaction)
}

templ TransactionList(tr []aggregate.Transaction) {
	<div class="overflow-x-auto">
		<table class="table text-white">
			<!-- head -->
			<thead>
				<tr>
					<th>Transaction Type</th>
					<th>Cost</th>
					<th>Category</th>
				</tr>
			</thead>
			<tbody id="user-transaction-table">
				for _, t := range tr {
					@fragments.TransactionRow(t)
				}
			</tbody>
		</table>
	</div>
}

templ UserHome(u model.UserAggregate) {
	if u.Budget == nil {
		@forms.BudgetFrom(u.User.ID)
	} else {
		<div class="flex justify-between mr-10 items-center">
			@UserBudgetStat(u)
			@forms.TransactionForm(u.User.ID, u.Category)
		</div>
		@TransactionList(u.Transaction)
	}
}
